{
  // Place your adventofcode2020 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Day Skeleton": {
    "scope": "haskell",
    "prefix": "advent",
    "body": [
      "module $TM_FILENAME_BASE (main, part1, part2) where",
      "",
      "import AOC (notImplemented, solveAoCDay)",
      "",
      "main :: IO ()",
      "main = solveAoCDay ${TM_DIRECTORY/.*?adventofcode(\\d+).*/$1/} ${TM_FILENAME_BASE/.*(..)$/$1/} part1 part2",
      "",
      "part1 :: String -> String",
      "part1 = notImplemented",
      "",
      "part2 :: String -> String",
      "part2 = notImplemented",
      ""
    ]
  },
  "Spec Skeleton": {
    "scope": "haskell",
    "prefix": "adventspec",
    "body": [
      "module $TM_FILENAME_BASE (spec) where",
      "",
      "import ${TM_FILENAME_BASE/Spec//} (part1, part2)",
      "import Test.Hspec",
      "",
      "input = \"\"",
      "",
      "spec :: Spec",
      "spec = do",
      "  describe \"Part1\" $ do",
      "    it input $ do",
      "      part1 input `shouldBe` \"1\"",
      "",
      "  describe \"Part2\" $ do",
      "    it input $ do",
      "      part2 input `shouldBe` \"1\"",
      ""
    ]
  }
}
